// Generated by rstantools.  Do not edit by hand.

/*
    assessEpidemicCurves is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    assessEpidemicCurves is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with assessEpidemicCurves.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_lgp_Rt_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 178> locations_array__ =
  {" (found before start of program)",
  " (in 'lgp_Rt', line 71, column 2 to column 24)",
  " (in 'lgp_Rt', line 72, column 2 to column 20)",
  " (in 'lgp_Rt', line 73, column 2 to column 26)",
  " (in 'lgp_Rt', line 74, column 2 to column 24)",
  " (in 'lgp_Rt', line 77, column 2 to column 18)",
  " (in 'lgp_Rt', line 78, column 2 to column 17)",
  " (in 'lgp_Rt', line 79, column 2 to column 33)",
  " (in 'lgp_Rt', line 80, column 2 to column 14)",
  " (in 'lgp_Rt', line 81, column 2 to column 23)",
  " (in 'lgp_Rt', line 82, column 2 to column 25)",
  " (in 'lgp_Rt', line 83, column 2 to column 30)",
  " (in 'lgp_Rt', line 84, column 2 to column 25)",
  " (in 'lgp_Rt', line 85, column 2 to column 31)",
  " (in 'lgp_Rt', line 86, column 2 to column 20)",
  " (in 'lgp_Rt', line 154, column 2 to column 21)",
  " (in 'lgp_Rt', line 155, column 2 to column 23)",
  " (in 'lgp_Rt', line 156, column 2 to column 29)",
  " (in 'lgp_Rt', line 157, column 2 to column 24)",
  " (in 'lgp_Rt', line 158, column 2 to column 31)",
  " (in 'lgp_Rt', line 94, column 4 to column 16)",
  " (in 'lgp_Rt', line 95, column 4 to column 16)",
  " (in 'lgp_Rt', line 93, column 9 to line 96, column 3)",
  " (in 'lgp_Rt', line 89, column 4 to column 52)",
  " (in 'lgp_Rt', line 90, column 4 to column 34)",
  " (in 'lgp_Rt', line 91, column 19 to column 46)",
  " (in 'lgp_Rt', line 91, column 4 to column 46)",
  " (in 'lgp_Rt', line 92, column 4 to column 30)",
  " (in 'lgp_Rt', line 88, column 25 to line 93, column 3)",
  " (in 'lgp_Rt', line 88, column 2 to line 96, column 3)",
  " (in 'lgp_Rt', line 98, column 2 to column 26)",
  " (in 'lgp_Rt', line 99, column 2 to column 13)",
  " (in 'lgp_Rt', line 105, column 4 to column 19)",
  " (in 'lgp_Rt', line 104, column 9 to line 106, column 3)",
  " (in 'lgp_Rt', line 102, column 4 to column 58)",
  " (in 'lgp_Rt', line 103, column 4 to column 14)",
  " (in 'lgp_Rt', line 101, column 24 to line 104, column 3)",
  " (in 'lgp_Rt', line 101, column 2 to line 106, column 3)",
  " (in 'lgp_Rt', line 108, column 2 to column 57)",
  " (in 'lgp_Rt', line 109, column 2 to column 37)",
  " (in 'lgp_Rt', line 124, column 4 to column 23)",
  " (in 'lgp_Rt', line 132, column 10 to column 61)",
  " (in 'lgp_Rt', line 131, column 23 to line 133, column 9)",
  " (in 'lgp_Rt', line 131, column 8 to line 133, column 9)",
  " (in 'lgp_Rt', line 130, column 13 to line 134, column 7)",
  " (in 'lgp_Rt', line 128, column 10 to column 61)",
  " (in 'lgp_Rt', line 127, column 29 to line 129, column 9)",
  " (in 'lgp_Rt', line 127, column 8 to line 129, column 9)",
  " (in 'lgp_Rt', line 126, column 18 to line 130, column 7)",
  " (in 'lgp_Rt', line 126, column 6 to line 134, column 7)",
  " (in 'lgp_Rt', line 125, column 19 to line 135, column 5)",
  " (in 'lgp_Rt', line 125, column 4 to line 135, column 5)",
  " (in 'lgp_Rt', line 123, column 9 to line 136, column 3)",
  " (in 'lgp_Rt', line 111, column 4 to column 21)",
  " (in 'lgp_Rt', line 119, column 10 to column 62)",
  " (in 'lgp_Rt', line 118, column 23 to line 120, column 9)",
  " (in 'lgp_Rt', line 118, column 8 to line 120, column 9)",
  " (in 'lgp_Rt', line 117, column 13 to line 121, column 7)",
  " (in 'lgp_Rt', line 115, column 10 to column 62)",
  " (in 'lgp_Rt', line 114, column 29 to line 116, column 9)",
  " (in 'lgp_Rt', line 114, column 8 to line 116, column 9)",
  " (in 'lgp_Rt', line 113, column 18 to line 117, column 7)",
  " (in 'lgp_Rt', line 113, column 6 to line 121, column 7)",
  " (in 'lgp_Rt', line 112, column 19 to line 122, column 5)",
  " (in 'lgp_Rt', line 112, column 4 to line 122, column 5)",
  " (in 'lgp_Rt', line 110, column 18 to line 123, column 3)",
  " (in 'lgp_Rt', line 110, column 2 to line 136, column 3)",
  " (in 'lgp_Rt', line 138, column 4 to column 51)",
  " (in 'lgp_Rt', line 137, column 16 to line 139, column 3)",
  " (in 'lgp_Rt', line 137, column 2 to line 139, column 3)",
  " (in 'lgp_Rt', line 161, column 4 to column 46)",
  " (in 'lgp_Rt', line 162, column 4 to column 56)",
  " (in 'lgp_Rt', line 160, column 22 to line 163, column 3)",
  " (in 'lgp_Rt', line 160, column 2 to line 163, column 3)",
  " (in 'lgp_Rt', line 166, column 4 to column 21)",
  " (in 'lgp_Rt', line 167, column 19 to column 77)",
  " (in 'lgp_Rt', line 167, column 4 to column 77)",
  " (in 'lgp_Rt', line 168, column 4 to column 71)",
  " (in 'lgp_Rt', line 169, column 4 to column 58)",
  " (in 'lgp_Rt', line 165, column 13 to line 170, column 3)",
  " (in 'lgp_Rt', line 165, column 2 to line 170, column 3)",
  " (in 'lgp_Rt', line 142, column 2 to column 69)",
  " (in 'lgp_Rt', line 143, column 2 to column 37)",
  " (in 'lgp_Rt', line 145, column 4 to column 62)",
  " (in 'lgp_Rt', line 146, column 4 to column 27)",
  " (in 'lgp_Rt', line 148, column 8 to column 39)",
  " (in 'lgp_Rt', line 147, column 28 to line 149, column 7)",
  " (in 'lgp_Rt', line 147, column 6 to line 149, column 7)",
  " (in 'lgp_Rt', line 144, column 18 to line 150, column 3)",
  " (in 'lgp_Rt', line 144, column 2 to line 150, column 3)",
  " (in 'lgp_Rt', line 151, column 25 to column 57)",
  " (in 'lgp_Rt', line 151, column 2 to column 57)",
  " (in 'lgp_Rt', line 6, column 2 to column 18)",
  " (in 'lgp_Rt', line 7, column 2 to column 17)",
  " (in 'lgp_Rt', line 8, column 17 to column 18)",
  " (in 'lgp_Rt', line 8, column 2 to column 20)",
  " (in 'lgp_Rt', line 9, column 9 to column 10)",
  " (in 'lgp_Rt', line 9, column 2 to column 12)",
  " (in 'lgp_Rt', line 10, column 18 to column 19)",
  " (in 'lgp_Rt', line 10, column 2 to column 24)",
  " (in 'lgp_Rt', line 11, column 2 to column 17)",
  " (in 'lgp_Rt', line 12, column 2 to column 41)",
  " (in 'lgp_Rt', line 13, column 2 to column 39)",
  " (in 'lgp_Rt', line 14, column 2 to column 22)",
  " (in 'lgp_Rt', line 15, column 2 to column 30)",
  " (in 'lgp_Rt', line 16, column 2 to column 28)",
  " (in 'lgp_Rt', line 17, column 2 to column 22)",
  " (in 'lgp_Rt', line 18, column 2 to column 31)",
  " (in 'lgp_Rt', line 19, column 2 to column 26)",
  " (in 'lgp_Rt', line 20, column 2 to column 23)",
  " (in 'lgp_Rt', line 21, column 2 to column 25)",
  " (in 'lgp_Rt', line 22, column 2 to column 23)",
  " (in 'lgp_Rt', line 23, column 2 to column 17)",
  " (in 'lgp_Rt', line 26, column 18 to column 19)",
  " (in 'lgp_Rt', line 26, column 2 to column 27)",
  " (in 'lgp_Rt', line 27, column 13 to column 14)",
  " (in 'lgp_Rt', line 27, column 2 to column 24)",
  " (in 'lgp_Rt', line 28, column 9 to column 10)",
  " (in 'lgp_Rt', line 28, column 12 to column 13)",
  " (in 'lgp_Rt', line 28, column 2 to column 23)",
  " (in 'lgp_Rt', line 29, column 2 to column 18)",
  " (in 'lgp_Rt', line 30, column 2 to column 18)",
  " (in 'lgp_Rt', line 31, column 10 to column 11)",
  " (in 'lgp_Rt', line 31, column 2 to column 19)",
  " (in 'lgp_Rt', line 32, column 18 to column 19)",
  " (in 'lgp_Rt', line 32, column 2 to column 31)",
  " (in 'lgp_Rt', line 33, column 2 to column 21)",
  " (in 'lgp_Rt', line 34, column 2 to column 37)",
  " (in 'lgp_Rt', line 35, column 2 to column 36)",
  " (in 'lgp_Rt', line 38, column 4 to column 28)",
  " (in 'lgp_Rt', line 37, column 17 to line 39, column 3)",
  " (in 'lgp_Rt', line 37, column 2 to line 39, column 3)",
  " (in 'lgp_Rt', line 41, column 2 to column 46)",
  " (in 'lgp_Rt', line 42, column 17 to column 56)",
  " (in 'lgp_Rt', line 42, column 2 to column 56)",
  " (in 'lgp_Rt', line 43, column 2 to column 40)",
  " (in 'lgp_Rt', line 45, column 2 to column 60)",
  " (in 'lgp_Rt', line 46, column 2 to column 35)",
  " (in 'lgp_Rt', line 47, column 2 to column 34)",
  " (in 'lgp_Rt', line 48, column 17 to column 76)",
  " (in 'lgp_Rt', line 48, column 2 to column 76)",
  " (in 'lgp_Rt', line 49, column 2 to column 29)",
  " (in 'lgp_Rt', line 50, column 2 to column 25)",
  " (in 'lgp_Rt', line 55, column 4 to column 14)",
  " (in 'lgp_Rt', line 54, column 9 to line 56, column 3)",
  " (in 'lgp_Rt', line 53, column 4 to column 14)",
  " (in 'lgp_Rt', line 52, column 18 to line 54, column 3)",
  " (in 'lgp_Rt', line 52, column 2 to line 56, column 3)",
  " (in 'lgp_Rt', line 61, column 4 to column 21)",
  " (in 'lgp_Rt', line 60, column 9 to line 62, column 3)",
  " (in 'lgp_Rt', line 59, column 4 to column 21)",
  " (in 'lgp_Rt', line 58, column 24 to line 60, column 3)",
  " (in 'lgp_Rt', line 58, column 2 to line 62, column 3)",
  " (in 'lgp_Rt', line 67, column 4 to column 20)",
  " (in 'lgp_Rt', line 66, column 9 to line 68, column 3)",
  " (in 'lgp_Rt', line 65, column 4 to column 20)",
  " (in 'lgp_Rt', line 64, column 27 to line 66, column 3)",
  " (in 'lgp_Rt', line 64, column 2 to line 68, column 3)",
  " (in 'lgp_Rt', line 71, column 9 to column 14)",
  " (in 'lgp_Rt', line 72, column 9 to column 10)",
  " (in 'lgp_Rt', line 73, column 12 to column 24)",
  " (in 'lgp_Rt', line 74, column 11 to column 22)",
  " (in 'lgp_Rt', line 77, column 13 to column 14)",
  " (in 'lgp_Rt', line 78, column 9 to column 10)",
  " (in 'lgp_Rt', line 78, column 12 to column 13)",
  " (in 'lgp_Rt', line 79, column 19 to column 31)",
  " (in 'lgp_Rt', line 80, column 9 to column 10)",
  " (in 'lgp_Rt', line 81, column 18 to column 19)",
  " (in 'lgp_Rt', line 82, column 18 to column 19)",
  " (in 'lgp_Rt', line 83, column 9 to column 10)",
  " (in 'lgp_Rt', line 83, column 12 to column 13)",
  " (in 'lgp_Rt', line 84, column 18 to column 19)",
  " (in 'lgp_Rt', line 85, column 18 to column 29)",
  " (in 'lgp_Rt', line 154, column 9 to column 13)",
  " (in 'lgp_Rt', line 155, column 9 to column 13)",
  " (in 'lgp_Rt', line 156, column 26 to column 27)",
  " (in 'lgp_Rt', line 157, column 21 to column 22)",
  " (in 'lgp_Rt', line 158, column 28 to column 29)"};
#include <stan_meta_header.hpp>
class model_lgp_Rt final : public model_base_crtp<model_lgp_Rt> {
private:
  int N0;
  int N;
  std::vector<int> y;
  std::vector<double> x;
  Eigen::Matrix<double,-1,1> mu_data__;
  int S;
  double generation_interval_mean;
  double generation_interval_sd;
  double sigma;
  double ls_prior_mean;
  double ls_prior_sd;
  double k_inv;
  double log_k_prior_sd;
  int M;
  int y_ahead;
  double mu_ahead;
  double nugget;
  int c;
  Eigen::Matrix<double,-1,1> y_reg_data__;
  Eigen::Matrix<double,-1,-1> fixed_C_data__;
  Eigen::Matrix<double,-1,-1> fixed_L_data__;
  double a;
  double b;
  Eigen::Matrix<double,-1,1> omega_data__;
  Eigen::Matrix<double,-1,1> log_omega_data__;
  int N_eta;
  int uncertain_ls;
  int uncertain_k;
  int y_rep_1dim__;
  int log_lik_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> mu{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y_reg{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> fixed_C{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> fixed_L{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> omega{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> log_omega{nullptr, 0};
public:
  ~model_lgp_Rt() {}
  model_lgp_Rt(stan::io::var_context& context__, unsigned int
               random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_lgp_Rt_namespace::model_lgp_Rt";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 92;
      context__.validate_dims("data initialization", "N0", "int",
        std::vector<size_t>{});
      N0 = std::numeric_limits<int>::min();
      current_statement__ = 92;
      N0 = context__.vals_i("N0")[(1 - 1)];
      current_statement__ = 92;
      stan::math::check_greater_or_equal(function__, "N0", N0, 1);
      current_statement__ = 93;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 93;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 93;
      stan::math::check_greater_or_equal(function__, "N", N, 2);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 95;
      context__.validate_dims("data initialization", "y", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 95;
      y = context__.vals_i("y");
      current_statement__ = 95;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 97;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      x = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 97;
      x = context__.vals_r("x");
      current_statement__ = 98;
      stan::math::validate_non_negative_index("mu", "N", N);
      current_statement__ = 99;
      context__.validate_dims("data initialization", "mu", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      mu_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&mu) Eigen::Map<Eigen::Matrix<double,-1,1>>(mu_data__.data(), N);
      {
        std::vector<local_scalar_t__> mu_flat__;
        current_statement__ = 99;
        mu_flat__ = context__.vals_r("mu");
        current_statement__ = 99;
        pos__ = 1;
        current_statement__ = 99;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 99;
          stan::model::assign(mu, mu_flat__[(pos__ - 1)],
            "assigning variable mu", stan::model::index_uni(sym1__));
          current_statement__ = 99;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 99;
      stan::math::check_greater_or_equal(function__, "mu", mu, 0);
      current_statement__ = 100;
      context__.validate_dims("data initialization", "S", "int",
        std::vector<size_t>{});
      S = std::numeric_limits<int>::min();
      current_statement__ = 100;
      S = context__.vals_i("S")[(1 - 1)];
      current_statement__ = 100;
      stan::math::check_greater_or_equal(function__, "S", S, 1);
      current_statement__ = 101;
      context__.validate_dims("data initialization",
        "generation_interval_mean", "double", std::vector<size_t>{});
      generation_interval_mean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 101;
      generation_interval_mean = context__.vals_r("generation_interval_mean")[(1
        - 1)];
      current_statement__ = 101;
      stan::math::check_greater_or_equal(function__,
        "generation_interval_mean", generation_interval_mean, 0);
      current_statement__ = 102;
      context__.validate_dims("data initialization",
        "generation_interval_sd", "double", std::vector<size_t>{});
      generation_interval_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 102;
      generation_interval_sd = context__.vals_r("generation_interval_sd")[(1
        - 1)];
      current_statement__ = 102;
      stan::math::check_greater_or_equal(function__,
        "generation_interval_sd", generation_interval_sd, 0);
      current_statement__ = 103;
      context__.validate_dims("data initialization", "sigma", "double",
        std::vector<size_t>{});
      sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 103;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      current_statement__ = 103;
      stan::math::check_greater_or_equal(function__, "sigma", sigma, 0);
      current_statement__ = 104;
      context__.validate_dims("data initialization", "ls_prior_mean",
        "double", std::vector<size_t>{});
      ls_prior_mean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 104;
      ls_prior_mean = context__.vals_r("ls_prior_mean")[(1 - 1)];
      current_statement__ = 104;
      stan::math::check_greater_or_equal(function__, "ls_prior_mean",
        ls_prior_mean, 0);
      current_statement__ = 105;
      context__.validate_dims("data initialization", "ls_prior_sd", "double",
        std::vector<size_t>{});
      ls_prior_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 105;
      ls_prior_sd = context__.vals_r("ls_prior_sd")[(1 - 1)];
      current_statement__ = 105;
      stan::math::check_greater_or_equal(function__, "ls_prior_sd",
        ls_prior_sd, 0);
      current_statement__ = 106;
      context__.validate_dims("data initialization", "k_inv", "double",
        std::vector<size_t>{});
      k_inv = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 106;
      k_inv = context__.vals_r("k_inv")[(1 - 1)];
      current_statement__ = 106;
      stan::math::check_greater_or_equal(function__, "k_inv", k_inv, 0);
      current_statement__ = 107;
      context__.validate_dims("data initialization", "log_k_prior_sd",
        "double", std::vector<size_t>{});
      log_k_prior_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 107;
      log_k_prior_sd = context__.vals_r("log_k_prior_sd")[(1 - 1)];
      current_statement__ = 107;
      stan::math::check_greater_or_equal(function__, "log_k_prior_sd",
        log_k_prior_sd, 0);
      current_statement__ = 108;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 108;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 108;
      stan::math::check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 108;
      stan::math::check_less_or_equal(function__, "M", M, 1);
      current_statement__ = 109;
      context__.validate_dims("data initialization", "y_ahead", "int",
        std::vector<size_t>{});
      y_ahead = std::numeric_limits<int>::min();
      current_statement__ = 109;
      y_ahead = context__.vals_i("y_ahead")[(1 - 1)];
      current_statement__ = 109;
      stan::math::check_greater_or_equal(function__, "y_ahead", y_ahead, 0);
      current_statement__ = 110;
      context__.validate_dims("data initialization", "mu_ahead", "double",
        std::vector<size_t>{});
      mu_ahead = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 110;
      mu_ahead = context__.vals_r("mu_ahead")[(1 - 1)];
      current_statement__ = 110;
      stan::math::check_greater_or_equal(function__, "mu_ahead", mu_ahead, 0);
      current_statement__ = 111;
      context__.validate_dims("data initialization", "nugget", "double",
        std::vector<size_t>{});
      nugget = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 111;
      nugget = context__.vals_r("nugget")[(1 - 1)];
      current_statement__ = 111;
      stan::math::check_greater_or_equal(function__, "nugget", nugget, 0);
      current_statement__ = 112;
      context__.validate_dims("data initialization", "c", "int",
        std::vector<size_t>{});
      c = std::numeric_limits<int>::min();
      current_statement__ = 112;
      c = context__.vals_i("c")[(1 - 1)];
      current_statement__ = 112;
      stan::math::check_greater_or_equal(function__, "c", c, 0);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("y_reg", "N", N);
      current_statement__ = 114;
      y_reg_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&y_reg)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(y_reg_data__.data(), N);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("fixed_C", "N", N);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("fixed_C", "N", N);
      current_statement__ = 116;
      fixed_C_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, N,
                         std::numeric_limits<double>::quiet_NaN());
      new (&fixed_C)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(fixed_C_data__.data(), N, N);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("fixed_L", "N", N);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("fixed_L", "N", N);
      current_statement__ = 119;
      fixed_L_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, N,
                         std::numeric_limits<double>::quiet_NaN());
      new (&fixed_L)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(fixed_L_data__.data(), N, N);
      current_statement__ = 120;
      a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 121;
      b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 122;
      stan::math::validate_non_negative_index("omega", "S", S);
      current_statement__ = 123;
      omega_data__ = Eigen::Matrix<double,-1,1>::Constant(S,
                       std::numeric_limits<double>::quiet_NaN());
      new (&omega)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(omega_data__.data(), S);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("log_omega", "S", S);
      current_statement__ = 125;
      log_omega_data__ = Eigen::Matrix<double,-1,1>::Constant(S,
                           std::numeric_limits<double>::quiet_NaN());
      new (&log_omega)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(log_omega_data__.data(), S);
      current_statement__ = 126;
      N_eta = std::numeric_limits<int>::min();
      current_statement__ = 127;
      uncertain_ls = std::numeric_limits<int>::min();
      current_statement__ = 128;
      uncertain_k = std::numeric_limits<int>::min();
      current_statement__ = 131;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 129;
        stan::model::assign(y_reg,
          stan::math::max(
            stan::model::rvalue(y, "y", stan::model::index_uni(i)), c),
          "assigning variable y_reg", stan::model::index_uni(i));
      }
      current_statement__ = 132;
      stan::model::assign(fixed_C,
        stan::math::cov_exp_quad(x, 1, ls_prior_mean),
        "assigning variable fixed_C");
      current_statement__ = 134;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 133;
        stan::model::assign(fixed_C,
          (stan::model::rvalue(fixed_C, "fixed_C", stan::model::index_uni(i),
             stan::model::index_uni(i)) + nugget),
          "assigning variable fixed_C", stan::model::index_uni(i),
          stan::model::index_uni(i));
      }
      current_statement__ = 135;
      stan::model::assign(fixed_L, stan::math::cholesky_decompose(fixed_C),
        "assigning variable fixed_L");
      current_statement__ = 136;
      b = (generation_interval_mean /
        stan::math::pow(generation_interval_sd, 2));
      current_statement__ = 137;
      a = (generation_interval_mean * b);
      current_statement__ = 138;
      stan::model::assign(omega, stan::math::gamma_cdf(1.5, a, b),
        "assigning variable omega", stan::model::index_uni(1));
      current_statement__ = 140;
      for (int i = 2; i <= S; ++i) {
        current_statement__ = 139;
        stan::model::assign(omega, (stan::math::gamma_cdf((i + 0.5), a, b) -
          stan::math::gamma_cdf((i - 0.5), a, b)),
          "assigning variable omega", stan::model::index_uni(i));
      }
      current_statement__ = 141;
      stan::model::assign(omega,
        stan::math::divide(stan::model::deep_copy(omega),
          stan::math::sum(omega)), "assigning variable omega");
      current_statement__ = 142;
      stan::model::assign(log_omega, stan::math::log(omega),
        "assigning variable log_omega");
      current_statement__ = 147;
      if (stan::math::logical_eq(k_inv, 0)) {
        current_statement__ = 145;
        N_eta = 0;
      } else {
        current_statement__ = 143;
        N_eta = N;
      }
      current_statement__ = 152;
      if (stan::math::logical_eq(ls_prior_sd, 0)) {
        current_statement__ = 150;
        uncertain_ls = 0;
      } else {
        current_statement__ = 148;
        uncertain_ls = 1;
      }
      current_statement__ = 157;
      if (stan::math::logical_eq(log_k_prior_sd, 0)) {
        current_statement__ = 155;
        uncertain_k = 0;
      } else {
        current_statement__ = 153;
        uncertain_k = 1;
      }
      current_statement__ = 114;
      stan::math::check_greater_or_equal(function__, "y_reg", y_reg, 0);
      current_statement__ = 116;
      stan::math::check_cov_matrix(function__, "fixed_C", fixed_C);
      current_statement__ = 120;
      stan::math::check_greater_or_equal(function__, "a", a, 0);
      current_statement__ = 121;
      stan::math::check_greater_or_equal(function__, "b", b, 0);
      current_statement__ = 123;
      stan::math::check_simplex(function__, "omega", omega);
      current_statement__ = 125;
      stan::math::check_less_or_equal(function__, "log_omega", log_omega, 0);
      current_statement__ = 126;
      stan::math::check_greater_or_equal(function__, "N_eta", N_eta, 0);
      current_statement__ = 127;
      stan::math::check_greater_or_equal(function__, "uncertain_ls",
        uncertain_ls, 0);
      current_statement__ = 127;
      stan::math::check_less_or_equal(function__, "uncertain_ls",
        uncertain_ls, 1);
      current_statement__ = 128;
      stan::math::check_greater_or_equal(function__, "uncertain_k",
        uncertain_k, 0);
      current_statement__ = 128;
      stan::math::check_less_or_equal(function__, "uncertain_k", uncertain_k,
        1);
      current_statement__ = 158;
      stan::math::validate_non_negative_index("log_eta", "N_eta", N_eta);
      current_statement__ = 159;
      stan::math::validate_non_negative_index("epsilon", "N", N);
      current_statement__ = 160;
      stan::math::validate_non_negative_index("z_ls", "uncertain_ls",
        uncertain_ls);
      current_statement__ = 161;
      stan::math::validate_non_negative_index("z_k", "uncertain_k",
        uncertain_k);
      current_statement__ = 162;
      stan::math::validate_non_negative_index("C", "N", N);
      current_statement__ = 162;
      stan::math::validate_non_negative_index("C", "N", N);
      current_statement__ = 163;
      stan::math::validate_non_negative_index("L", "N", N);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("L", "N", N);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("ls", "uncertain_ls",
        uncertain_ls);
      current_statement__ = 166;
      stan::math::validate_non_negative_index("f", "N", N);
      current_statement__ = 167;
      stan::math::validate_non_negative_index("R", "N", N);
      current_statement__ = 168;
      stan::math::validate_non_negative_index("eta", "N", N);
      current_statement__ = 169;
      stan::math::validate_non_negative_index("tmp_psi_matrix", "N", N);
      current_statement__ = 170;
      stan::math::validate_non_negative_index("tmp_psi_matrix", "S", S);
      current_statement__ = 171;
      stan::math::validate_non_negative_index("psi", "N", N);
      current_statement__ = 172;
      stan::math::validate_non_negative_index("k", "uncertain_k", uncertain_k);
      current_statement__ = 173;
      y_rep_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 173;
      y_rep_1dim__ = (N - N0);
      current_statement__ = 173;
      stan::math::validate_non_negative_index("y_rep", "N - N0", y_rep_1dim__);
      current_statement__ = 174;
      log_lik_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 174;
      log_lik_1dim__ = (N - N0);
      current_statement__ = 174;
      stan::math::validate_non_negative_index("log_lik", "N - N0",
        log_lik_1dim__);
      current_statement__ = 175;
      stan::math::validate_non_negative_index("psi_ahead", "M", M);
      current_statement__ = 176;
      stan::math::validate_non_negative_index("log_lik_ahead", "M", M);
      current_statement__ = 177;
      stan::math::validate_non_negative_index("y_rep_ahead", "M", M);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N_eta + N + uncertain_ls + uncertain_k;
  }
  inline std::string model_name() const final {
    return "model_lgp_Rt";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_lgp_Rt_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> log_eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_eta, DUMMY_VAR__);
      current_statement__ = 1;
      log_eta = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(N_eta);
      Eigen::Matrix<local_scalar_t__,-1,1> epsilon =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 2;
      epsilon = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      std::vector<local_scalar_t__> z_ls =
        std::vector<local_scalar_t__>(uncertain_ls, DUMMY_VAR__);
      current_statement__ = 3;
      z_ls = in__.template read<std::vector<local_scalar_t__>>(uncertain_ls);
      std::vector<local_scalar_t__> z_k =
        std::vector<local_scalar_t__>(uncertain_k, DUMMY_VAR__);
      current_statement__ = 4;
      z_k = in__.template read<std::vector<local_scalar_t__>>(uncertain_k);
      Eigen::Matrix<local_scalar_t__,-1,-1> C =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> L =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      std::vector<local_scalar_t__> ls =
        std::vector<local_scalar_t__>(uncertain_ls, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> f =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> R =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> tmp_psi_matrix =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, S, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> psi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> k =
        std::vector<local_scalar_t__>(uncertain_k, DUMMY_VAR__);
      local_scalar_t__ kk = DUMMY_VAR__;
      current_statement__ = 29;
      if (stan::math::logical_eq(uncertain_ls, 1)) {
        current_statement__ = 23;
        stan::model::assign(ls, (ls_prior_mean + (ls_prior_sd *
          stan::model::rvalue(z_ls, "z_ls", stan::model::index_uni(1)))),
          "assigning variable ls", stan::model::index_uni(1));
        current_statement__ = 24;
        stan::model::assign(C,
          stan::math::cov_exp_quad(x, 1,
            stan::model::rvalue(ls, "ls", stan::model::index_uni(1))),
          "assigning variable C");
        current_statement__ = 26;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 25;
          stan::model::assign(C,
            (stan::model::rvalue(C, "C", stan::model::index_uni(i),
               stan::model::index_uni(i)) + nugget), "assigning variable C",
            stan::model::index_uni(i), stan::model::index_uni(i));
        }
        current_statement__ = 27;
        stan::model::assign(L, stan::math::cholesky_decompose(C),
          "assigning variable L");
      } else {
        current_statement__ = 20;
        stan::model::assign(C, fixed_C, "assigning variable C");
        current_statement__ = 21;
        stan::model::assign(L, fixed_L, "assigning variable L");
      }
      current_statement__ = 30;
      stan::model::assign(f,
        stan::math::multiply(stan::math::multiply(sigma, L), epsilon),
        "assigning variable f");
      current_statement__ = 31;
      stan::model::assign(R, stan::math::exp(f), "assigning variable R");
      current_statement__ = 37;
      if (stan::math::logical_eq(uncertain_k, 1)) {
        current_statement__ = 34;
        stan::model::assign(k,
          stan::math::exp((stan::math::log((1 / k_inv)) + (log_k_prior_sd *
            stan::model::rvalue(z_k, "z_k", stan::model::index_uni(1))))),
          "assigning variable k", stan::model::index_uni(1));
        current_statement__ = 35;
        kk = stan::model::rvalue(k, "k", stan::model::index_uni(1));
      } else {
        current_statement__ = 32;
        kk = (1 / k_inv);
      }
      current_statement__ = 38;
      stan::model::assign(tmp_psi_matrix,
        stan::math::rep_matrix(stan::math::negative_infinity(), N, S),
        "assigning variable tmp_psi_matrix");
      current_statement__ = 39;
      stan::model::assign(tmp_psi_matrix, stan::math::log(nugget),
        "assigning variable tmp_psi_matrix", stan::model::index_uni(1),
        stan::model::index_uni(1));
      current_statement__ = 66;
      if (stan::math::logical_eq(k_inv, 0)) {
        current_statement__ = 53;
        stan::model::assign(eta, stan::math::elt_multiply(R, y_reg),
          "assigning variable eta");
        current_statement__ = 64;
        for (int i = 2; i <= N; ++i) {
          current_statement__ = 62;
          if (stan::math::logical_lte(i, S)) {
            current_statement__ = 60;
            for (int j = 1; j <= (i - 1); ++j) {
              current_statement__ = 58;
              stan::model::assign(tmp_psi_matrix,
                (stan::math::log(
                   stan::model::rvalue(eta, "eta",
                     stan::model::index_uni((i - j)))) +
                stan::model::rvalue(log_omega, "log_omega",
                  stan::model::index_uni(j))),
                "assigning variable tmp_psi_matrix",
                stan::model::index_uni(i), stan::model::index_uni(j));
            }
          } else {
            current_statement__ = 56;
            for (int j = 1; j <= S; ++j) {
              current_statement__ = 54;
              stan::model::assign(tmp_psi_matrix,
                (stan::math::log(
                   stan::model::rvalue(eta, "eta",
                     stan::model::index_uni((i - j)))) +
                stan::model::rvalue(log_omega, "log_omega",
                  stan::model::index_uni(j))),
                "assigning variable tmp_psi_matrix",
                stan::model::index_uni(i), stan::model::index_uni(j));
            }
          }
        }
      } else {
        current_statement__ = 40;
        stan::model::assign(eta, stan::math::exp(log_eta),
          "assigning variable eta");
        current_statement__ = 51;
        for (int i = 2; i <= N; ++i) {
          current_statement__ = 49;
          if (stan::math::logical_lte(i, S)) {
            current_statement__ = 47;
            for (int j = 1; j <= (i - 1); ++j) {
              current_statement__ = 45;
              stan::model::assign(tmp_psi_matrix,
                (stan::model::rvalue(log_eta, "log_eta",
                   stan::model::index_uni((i - j))) +
                stan::model::rvalue(log_omega, "log_omega",
                  stan::model::index_uni(j))),
                "assigning variable tmp_psi_matrix",
                stan::model::index_uni(i), stan::model::index_uni(j));
            }
          } else {
            current_statement__ = 43;
            for (int j = 1; j <= S; ++j) {
              current_statement__ = 41;
              stan::model::assign(tmp_psi_matrix,
                (stan::model::rvalue(log_eta, "log_eta",
                   stan::model::index_uni((i - j))) +
                stan::model::rvalue(log_omega, "log_omega",
                  stan::model::index_uni(j))),
                "assigning variable tmp_psi_matrix",
                stan::model::index_uni(i), stan::model::index_uni(j));
            }
          }
        }
      }
      current_statement__ = 69;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 67;
        stan::model::assign(psi,
          stan::math::exp(
            stan::math::log_sum_exp(
              stan::model::rvalue(tmp_psi_matrix, "tmp_psi_matrix",
                stan::model::index_uni(i), stan::model::index_omni()))),
          "assigning variable psi", stan::model::index_uni(i));
      }
      current_statement__ = 5;
      stan::math::check_cov_matrix(function__, "C", C);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "ls", ls, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "R", R, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "eta", eta, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "psi", psi, 0);
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "k", k, 0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "kk", kk, 0);
      {
        current_statement__ = 81;
        lp_accum__.add(stan::math::poisson_lpmf<false>(
                         stan::model::rvalue(y, "y",
                           stan::model::index_min_max((N0 + 1), N)),
                         stan::math::add(
                           stan::model::rvalue(mu, "mu",
                             stan::model::index_min_max((N0 + 1), N)),
                           stan::model::rvalue(psi, "psi",
                             stan::model::index_min_max((N0 + 1), N)))));
        current_statement__ = 82;
        lp_accum__.add(stan::math::std_normal_lpdf<false>(epsilon));
        current_statement__ = 89;
        if (stan::math::logical_neq(k_inv, 0)) {
          current_statement__ = 83;
          lp_accum__.add(stan::math::gamma_lpdf<false>(
                           stan::math::exp(log_eta),
                           stan::math::multiply(y_reg, kk),
                           stan::math::elt_divide(kk, R)));
          current_statement__ = 84;
          lp_accum__.add(stan::math::sum(log_eta));
          current_statement__ = 87;
          if (stan::math::logical_eq(uncertain_k, 1)) {
            current_statement__ = 85;
            lp_accum__.add(stan::math::std_normal_lpdf<false>(z_k));
          }
        }
        current_statement__ = 91;
        if (stan::math::logical_eq(uncertain_ls, 1)) {
          current_statement__ = 90;
          lp_accum__.add(stan::math::std_normal_lpdf<false>(z_ls));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_lgp_Rt_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> log_eta =
        Eigen::Matrix<double,-1,1>::Constant(N_eta,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      log_eta = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(N_eta);
      Eigen::Matrix<double,-1,1> epsilon =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      epsilon = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      std::vector<double> z_ls =
        std::vector<double>(uncertain_ls,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      z_ls = in__.template read<std::vector<local_scalar_t__>>(uncertain_ls);
      std::vector<double> z_k =
        std::vector<double>(uncertain_k,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      z_k = in__.template read<std::vector<local_scalar_t__>>(uncertain_k);
      Eigen::Matrix<double,-1,-1> C =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> L =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> ls =
        std::vector<double>(uncertain_ls,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> f =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> R =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> eta =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> tmp_psi_matrix =
        Eigen::Matrix<double,-1,-1>::Constant(N, S,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> psi =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> k =
        std::vector<double>(uncertain_k,
          std::numeric_limits<double>::quiet_NaN());
      double kk = std::numeric_limits<double>::quiet_NaN();
      out__.write(log_eta);
      out__.write(epsilon);
      out__.write(z_ls);
      out__.write(z_k);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 29;
      if (stan::math::logical_eq(uncertain_ls, 1)) {
        current_statement__ = 23;
        stan::model::assign(ls, (ls_prior_mean + (ls_prior_sd *
          stan::model::rvalue(z_ls, "z_ls", stan::model::index_uni(1)))),
          "assigning variable ls", stan::model::index_uni(1));
        current_statement__ = 24;
        stan::model::assign(C,
          stan::math::cov_exp_quad(x, 1,
            stan::model::rvalue(ls, "ls", stan::model::index_uni(1))),
          "assigning variable C");
        current_statement__ = 26;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 25;
          stan::model::assign(C,
            (stan::model::rvalue(C, "C", stan::model::index_uni(i),
               stan::model::index_uni(i)) + nugget), "assigning variable C",
            stan::model::index_uni(i), stan::model::index_uni(i));
        }
        current_statement__ = 27;
        stan::model::assign(L, stan::math::cholesky_decompose(C),
          "assigning variable L");
      } else {
        current_statement__ = 20;
        stan::model::assign(C, fixed_C, "assigning variable C");
        current_statement__ = 21;
        stan::model::assign(L, fixed_L, "assigning variable L");
      }
      current_statement__ = 30;
      stan::model::assign(f,
        stan::math::multiply(stan::math::multiply(sigma, L), epsilon),
        "assigning variable f");
      current_statement__ = 31;
      stan::model::assign(R, stan::math::exp(f), "assigning variable R");
      current_statement__ = 37;
      if (stan::math::logical_eq(uncertain_k, 1)) {
        current_statement__ = 34;
        stan::model::assign(k,
          stan::math::exp((stan::math::log((1 / k_inv)) + (log_k_prior_sd *
            stan::model::rvalue(z_k, "z_k", stan::model::index_uni(1))))),
          "assigning variable k", stan::model::index_uni(1));
        current_statement__ = 35;
        kk = stan::model::rvalue(k, "k", stan::model::index_uni(1));
      } else {
        current_statement__ = 32;
        kk = (1 / k_inv);
      }
      current_statement__ = 38;
      stan::model::assign(tmp_psi_matrix,
        stan::math::rep_matrix(stan::math::negative_infinity(), N, S),
        "assigning variable tmp_psi_matrix");
      current_statement__ = 39;
      stan::model::assign(tmp_psi_matrix, stan::math::log(nugget),
        "assigning variable tmp_psi_matrix", stan::model::index_uni(1),
        stan::model::index_uni(1));
      current_statement__ = 66;
      if (stan::math::logical_eq(k_inv, 0)) {
        current_statement__ = 53;
        stan::model::assign(eta, stan::math::elt_multiply(R, y_reg),
          "assigning variable eta");
        current_statement__ = 64;
        for (int i = 2; i <= N; ++i) {
          current_statement__ = 62;
          if (stan::math::logical_lte(i, S)) {
            current_statement__ = 60;
            for (int j = 1; j <= (i - 1); ++j) {
              current_statement__ = 58;
              stan::model::assign(tmp_psi_matrix,
                (stan::math::log(
                   stan::model::rvalue(eta, "eta",
                     stan::model::index_uni((i - j)))) +
                stan::model::rvalue(log_omega, "log_omega",
                  stan::model::index_uni(j))),
                "assigning variable tmp_psi_matrix",
                stan::model::index_uni(i), stan::model::index_uni(j));
            }
          } else {
            current_statement__ = 56;
            for (int j = 1; j <= S; ++j) {
              current_statement__ = 54;
              stan::model::assign(tmp_psi_matrix,
                (stan::math::log(
                   stan::model::rvalue(eta, "eta",
                     stan::model::index_uni((i - j)))) +
                stan::model::rvalue(log_omega, "log_omega",
                  stan::model::index_uni(j))),
                "assigning variable tmp_psi_matrix",
                stan::model::index_uni(i), stan::model::index_uni(j));
            }
          }
        }
      } else {
        current_statement__ = 40;
        stan::model::assign(eta, stan::math::exp(log_eta),
          "assigning variable eta");
        current_statement__ = 51;
        for (int i = 2; i <= N; ++i) {
          current_statement__ = 49;
          if (stan::math::logical_lte(i, S)) {
            current_statement__ = 47;
            for (int j = 1; j <= (i - 1); ++j) {
              current_statement__ = 45;
              stan::model::assign(tmp_psi_matrix,
                (stan::model::rvalue(log_eta, "log_eta",
                   stan::model::index_uni((i - j))) +
                stan::model::rvalue(log_omega, "log_omega",
                  stan::model::index_uni(j))),
                "assigning variable tmp_psi_matrix",
                stan::model::index_uni(i), stan::model::index_uni(j));
            }
          } else {
            current_statement__ = 43;
            for (int j = 1; j <= S; ++j) {
              current_statement__ = 41;
              stan::model::assign(tmp_psi_matrix,
                (stan::model::rvalue(log_eta, "log_eta",
                   stan::model::index_uni((i - j))) +
                stan::model::rvalue(log_omega, "log_omega",
                  stan::model::index_uni(j))),
                "assigning variable tmp_psi_matrix",
                stan::model::index_uni(i), stan::model::index_uni(j));
            }
          }
        }
      }
      current_statement__ = 69;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 67;
        stan::model::assign(psi,
          stan::math::exp(
            stan::math::log_sum_exp(
              stan::model::rvalue(tmp_psi_matrix, "tmp_psi_matrix",
                stan::model::index_uni(i), stan::model::index_omni()))),
          "assigning variable psi", stan::model::index_uni(i));
      }
      current_statement__ = 5;
      stan::math::check_cov_matrix(function__, "C", C);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "ls", ls, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "R", R, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "eta", eta, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "psi", psi, 0);
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "k", k, 0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "kk", kk, 0);
      if (emit_transformed_parameters__) {
        out__.write(C);
        out__.write(L);
        out__.write(ls);
        out__.write(f);
        out__.write(R);
        out__.write(eta);
        out__.write(tmp_psi_matrix);
        out__.write(psi);
        out__.write(k);
        out__.write(kk);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> y_rep =
        Eigen::Matrix<double,-1,1>::Constant(y_rep_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(log_lik_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> psi_ahead =
        std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> log_lik_ahead =
        std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> y_rep_ahead =
        std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 73;
      for (int i = (N0 + 1); i <= N; ++i) {
        current_statement__ = 70;
        stan::model::assign(y_rep,
          stan::math::poisson_rng(
            (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
            stan::model::rvalue(psi, "psi", stan::model::index_uni(i))),
            base_rng__), "assigning variable y_rep",
          stan::model::index_uni((i - N0)));
        current_statement__ = 71;
        stan::model::assign(log_lik,
          stan::math::poisson_lpmf<false>(
            stan::model::rvalue(y, "y", stan::model::index_uni(i)),
            (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
            stan::model::rvalue(psi, "psi", stan::model::index_uni(i)))),
          "assigning variable log_lik", stan::model::index_uni((i - N0)));
      }
      current_statement__ = 80;
      if (stan::math::logical_eq(M, 1)) {
        current_statement__ = 74;
        stan::model::assign(psi_ahead, 0, "assigning variable psi_ahead",
          stan::model::index_uni(M));
        current_statement__ = 76;
        for (int i = 1; i <= S; ++i) {
          current_statement__ = 75;
          stan::model::assign(psi_ahead,
            (stan::model::rvalue(psi_ahead, "psi_ahead",
               stan::model::index_uni(M)) +
            (stan::model::rvalue(eta, "eta",
               stan::model::index_uni(((N - i) + 1))) *
            stan::model::rvalue(omega, "omega", stan::model::index_uni(i)))),
            "assigning variable psi_ahead", stan::model::index_uni(M));
        }
        current_statement__ = 77;
        stan::model::assign(log_lik_ahead,
          stan::math::poisson_lpmf<false>(y_ahead, (mu_ahead +
            stan::model::rvalue(psi_ahead, "psi_ahead",
              stan::model::index_uni(M)))),
          "assigning variable log_lik_ahead", stan::model::index_uni(M));
        current_statement__ = 78;
        stan::model::assign(y_rep_ahead,
          stan::math::poisson_rng((mu_ahead +
            stan::model::rvalue(psi_ahead, "psi_ahead",
              stan::model::index_uni(M))), base_rng__),
          "assigning variable y_rep_ahead", stan::model::index_uni(M));
      }
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "psi_ahead", psi_ahead,
        0);
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "y_rep_ahead",
        y_rep_ahead, 0);
      out__.write(y_rep);
      out__.write(log_lik);
      out__.write(psi_ahead);
      out__.write(log_lik_ahead);
      out__.write(y_rep_ahead);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> log_eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_eta, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(log_eta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_eta),
        "assigning variable log_eta");
      out__.write(log_eta);
      Eigen::Matrix<local_scalar_t__,-1,1> epsilon =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(epsilon,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable epsilon");
      out__.write(epsilon);
      std::vector<local_scalar_t__> z_ls =
        std::vector<local_scalar_t__>(uncertain_ls, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(z_ls,
        in__.read<std::vector<local_scalar_t__>>(uncertain_ls),
        "assigning variable z_ls");
      out__.write(z_ls);
      std::vector<local_scalar_t__> z_k =
        std::vector<local_scalar_t__>(uncertain_k, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(z_k,
        in__.read<std::vector<local_scalar_t__>>(uncertain_k),
        "assigning variable z_k");
      out__.write(z_k);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "log_eta",
        "double", std::vector<size_t>{static_cast<size_t>(N_eta)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "epsilon",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "z_ls", "double",
        std::vector<size_t>{static_cast<size_t>(uncertain_ls)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "z_k", "double",
        std::vector<size_t>{static_cast<size_t>(uncertain_k)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> log_eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_eta, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log_eta_flat__;
        current_statement__ = 1;
        log_eta_flat__ = context__.vals_r("log_eta");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N_eta; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(log_eta, log_eta_flat__[(pos__ - 1)],
            "assigning variable log_eta", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log_eta);
      Eigen::Matrix<local_scalar_t__,-1,1> epsilon =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> epsilon_flat__;
        current_statement__ = 2;
        epsilon_flat__ = context__.vals_r("epsilon");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(epsilon, epsilon_flat__[(pos__ - 1)],
            "assigning variable epsilon", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(epsilon);
      std::vector<local_scalar_t__> z_ls =
        std::vector<local_scalar_t__>(uncertain_ls, DUMMY_VAR__);
      current_statement__ = 3;
      z_ls = context__.vals_r("z_ls");
      out__.write(z_ls);
      std::vector<local_scalar_t__> z_k =
        std::vector<local_scalar_t__>(uncertain_k, DUMMY_VAR__);
      current_statement__ = 4;
      z_k = context__.vals_r("z_k");
      out__.write(z_k);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"log_eta", "epsilon", "z_ls", "z_k"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"C", "L", "ls", "f", "R", "eta", "tmp_psi_matrix", "psi", "k",
             "kk"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"y_rep", "log_lik", "psi_ahead", "log_lik_ahead", "y_rep_ahead"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    N_eta)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(uncertain_ls)},
                std::vector<size_t>{static_cast<size_t>(uncertain_k)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(uncertain_ls)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(S)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(uncertain_k)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(y_rep_1dim__)},
             std::vector<size_t>{static_cast<size_t>(log_lik_1dim__)},
             std::vector<size_t>{static_cast<size_t>(M)},
             std::vector<size_t>{static_cast<size_t>(M)},
             std::vector<size_t>{static_cast<size_t>(M)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N_eta; ++sym1__) {
      param_names__.emplace_back(std::string() + "log_eta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "epsilon" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= uncertain_ls; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_ls" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= uncertain_k; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_k" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "C" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "L" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= uncertain_ls; ++sym1__) {
        param_names__.emplace_back(std::string() + "ls" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "f" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "R" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "tmp_psi_matrix" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "psi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= uncertain_k; ++sym1__) {
        param_names__.emplace_back(std::string() + "k" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "kk");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= y_rep_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_rep" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "psi_ahead" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik_ahead" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_rep_ahead" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N_eta; ++sym1__) {
      param_names__.emplace_back(std::string() + "log_eta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "epsilon" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= uncertain_ls; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_ls" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= uncertain_k; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_k" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= (N + ((N * (N - 1)) / 2)); ++sym1__) {
        param_names__.emplace_back(std::string() + "C" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "L" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= uncertain_ls; ++sym1__) {
        param_names__.emplace_back(std::string() + "ls" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "f" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "R" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "tmp_psi_matrix" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "psi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= uncertain_k; ++sym1__) {
        param_names__.emplace_back(std::string() + "k" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "kk");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= y_rep_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_rep" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "psi_ahead" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik_ahead" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_rep_ahead" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"log_eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_eta) + "},\"block\":\"parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"z_ls\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(uncertain_ls) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_k\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(uncertain_k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"C\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ls\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(uncertain_ls) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tmp_psi_matrix\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(uncertain_k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"kk\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(y_rep_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"psi_ahead\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ahead\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_rep_ahead\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"log_eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_eta) + "},\"block\":\"parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"z_ls\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(uncertain_ls) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_k\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(uncertain_k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"C\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((N + ((N * (N - 1)) /2))) + "},\"block\":\"transformed_parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ls\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(uncertain_ls) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tmp_psi_matrix\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(uncertain_k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"kk\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(y_rep_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"psi_ahead\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ahead\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_rep_ahead\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((N_eta + N) + uncertain_ls) + uncertain_k);
    const size_t num_transformed = emit_transformed_parameters * (((((((((((N
      * N) + (N * N)) + uncertain_ls) + N) + N) + N) + (N * S)) + N) +
      uncertain_k) + 1));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((((y_rep_1dim__ + log_lik_1dim__) + M) + M) + M));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((N_eta + N) + uncertain_ls) + uncertain_k);
    const size_t num_transformed = emit_transformed_parameters * (((((((((((N
      * N) + (N * N)) + uncertain_ls) + N) + N) + N) + (N * S)) + N) +
      uncertain_k) + 1));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((((y_rep_1dim__ + log_lik_1dim__) + M) + M) + M));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_lgp_Rt_namespace::model_lgp_Rt;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_lgp_Rt_namespace::profiles__;
}
#endif
#endif
